/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { ProductionQueue } from "./ProductionQueue";
import { ProductionQueueCountArgs } from "./ProductionQueueCountArgs";
import { ProductionQueueFindManyArgs } from "./ProductionQueueFindManyArgs";
import { ProductionQueueFindUniqueArgs } from "./ProductionQueueFindUniqueArgs";
import { CreateProductionQueueArgs } from "./CreateProductionQueueArgs";
import { UpdateProductionQueueArgs } from "./UpdateProductionQueueArgs";
import { DeleteProductionQueueArgs } from "./DeleteProductionQueueArgs";
import { ProductionOrder } from "../../productionOrder/base/ProductionOrder";
import { ProductionQueueService } from "../productionQueue.service";
@graphql.Resolver(() => ProductionQueue)
export class ProductionQueueResolverBase {
  constructor(protected readonly service: ProductionQueueService) {}

  async _productionQueuesMeta(
    @graphql.Args() args: ProductionQueueCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [ProductionQueue])
  async productionQueues(
    @graphql.Args() args: ProductionQueueFindManyArgs
  ): Promise<ProductionQueue[]> {
    return this.service.productionQueues(args);
  }

  @graphql.Query(() => ProductionQueue, { nullable: true })
  async productionQueue(
    @graphql.Args() args: ProductionQueueFindUniqueArgs
  ): Promise<ProductionQueue | null> {
    const result = await this.service.productionQueue(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => ProductionQueue)
  async createProductionQueue(
    @graphql.Args() args: CreateProductionQueueArgs
  ): Promise<ProductionQueue> {
    return await this.service.createProductionQueue({
      ...args,
      data: {
        ...args.data,

        productionOrder: args.data.productionOrder
          ? {
              connect: args.data.productionOrder,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => ProductionQueue)
  async updateProductionQueue(
    @graphql.Args() args: UpdateProductionQueueArgs
  ): Promise<ProductionQueue | null> {
    try {
      return await this.service.updateProductionQueue({
        ...args,
        data: {
          ...args.data,

          productionOrder: args.data.productionOrder
            ? {
                connect: args.data.productionOrder,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => ProductionQueue)
  async deleteProductionQueue(
    @graphql.Args() args: DeleteProductionQueueArgs
  ): Promise<ProductionQueue | null> {
    try {
      return await this.service.deleteProductionQueue(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => ProductionOrder, {
    nullable: true,
    name: "productionOrder",
  })
  async getProductionOrder(
    @graphql.Parent() parent: ProductionQueue
  ): Promise<ProductionOrder | null> {
    const result = await this.service.getProductionOrder(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
