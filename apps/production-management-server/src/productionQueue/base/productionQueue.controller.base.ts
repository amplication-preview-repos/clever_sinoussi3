/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ProductionQueueService } from "../productionQueue.service";
import { ProductionQueueCreateInput } from "./ProductionQueueCreateInput";
import { ProductionQueue } from "./ProductionQueue";
import { ProductionQueueFindManyArgs } from "./ProductionQueueFindManyArgs";
import { ProductionQueueWhereUniqueInput } from "./ProductionQueueWhereUniqueInput";
import { ProductionQueueUpdateInput } from "./ProductionQueueUpdateInput";

export class ProductionQueueControllerBase {
  constructor(protected readonly service: ProductionQueueService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: ProductionQueue })
  async createProductionQueue(
    @common.Body() data: ProductionQueueCreateInput
  ): Promise<ProductionQueue> {
    return await this.service.createProductionQueue({
      data: {
        ...data,

        productionOrder: data.productionOrder
          ? {
              connect: data.productionOrder,
            }
          : undefined,
      },
      select: {
        createdAt: true,
        id: true,

        productionOrder: {
          select: {
            id: true,
          },
        },

        scheduledDate: true,
        status: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [ProductionQueue] })
  @ApiNestedQuery(ProductionQueueFindManyArgs)
  async productionQueues(
    @common.Req() request: Request
  ): Promise<ProductionQueue[]> {
    const args = plainToClass(ProductionQueueFindManyArgs, request.query);
    return this.service.productionQueues({
      ...args,
      select: {
        createdAt: true,
        id: true,

        productionOrder: {
          select: {
            id: true,
          },
        },

        scheduledDate: true,
        status: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: ProductionQueue })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async productionQueue(
    @common.Param() params: ProductionQueueWhereUniqueInput
  ): Promise<ProductionQueue | null> {
    const result = await this.service.productionQueue({
      where: params,
      select: {
        createdAt: true,
        id: true,

        productionOrder: {
          select: {
            id: true,
          },
        },

        scheduledDate: true,
        status: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: ProductionQueue })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateProductionQueue(
    @common.Param() params: ProductionQueueWhereUniqueInput,
    @common.Body() data: ProductionQueueUpdateInput
  ): Promise<ProductionQueue | null> {
    try {
      return await this.service.updateProductionQueue({
        where: params,
        data: {
          ...data,

          productionOrder: data.productionOrder
            ? {
                connect: data.productionOrder,
              }
            : undefined,
        },
        select: {
          createdAt: true,
          id: true,

          productionOrder: {
            select: {
              id: true,
            },
          },

          scheduledDate: true,
          status: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: ProductionQueue })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteProductionQueue(
    @common.Param() params: ProductionQueueWhereUniqueInput
  ): Promise<ProductionQueue | null> {
    try {
      return await this.service.deleteProductionQueue({
        where: params,
        select: {
          createdAt: true,
          id: true,

          productionOrder: {
            select: {
              id: true,
            },
          },

          scheduledDate: true,
          status: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
