/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  ProductionOrder as PrismaProductionOrder,
  ProductionQueue as PrismaProductionQueue,
  Product as PrismaProduct,
} from "@prisma/client";

export class ProductionOrderServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.ProductionOrderCountArgs, "select">
  ): Promise<number> {
    return this.prisma.productionOrder.count(args);
  }

  async productionOrders<T extends Prisma.ProductionOrderFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.ProductionOrderFindManyArgs>
  ): Promise<PrismaProductionOrder[]> {
    return this.prisma.productionOrder.findMany<Prisma.ProductionOrderFindManyArgs>(
      args
    );
  }
  async productionOrder<T extends Prisma.ProductionOrderFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.ProductionOrderFindUniqueArgs>
  ): Promise<PrismaProductionOrder | null> {
    return this.prisma.productionOrder.findUnique(args);
  }
  async createProductionOrder<T extends Prisma.ProductionOrderCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.ProductionOrderCreateArgs>
  ): Promise<PrismaProductionOrder> {
    return this.prisma.productionOrder.create<T>(args);
  }
  async updateProductionOrder<T extends Prisma.ProductionOrderUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.ProductionOrderUpdateArgs>
  ): Promise<PrismaProductionOrder> {
    return this.prisma.productionOrder.update<T>(args);
  }
  async deleteProductionOrder<T extends Prisma.ProductionOrderDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.ProductionOrderDeleteArgs>
  ): Promise<PrismaProductionOrder> {
    return this.prisma.productionOrder.delete(args);
  }

  async findProductionQueues(
    parentId: string,
    args: Prisma.ProductionQueueFindManyArgs
  ): Promise<PrismaProductionQueue[]> {
    return this.prisma.productionOrder
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .productionQueues(args);
  }

  async getProduct(parentId: string): Promise<PrismaProduct | null> {
    return this.prisma.productionOrder
      .findUnique({
        where: { id: parentId },
      })
      .product();
  }
}
