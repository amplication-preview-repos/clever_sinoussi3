/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ProductionOrderService } from "../productionOrder.service";
import { ProductionOrderCreateInput } from "./ProductionOrderCreateInput";
import { ProductionOrder } from "./ProductionOrder";
import { ProductionOrderFindManyArgs } from "./ProductionOrderFindManyArgs";
import { ProductionOrderWhereUniqueInput } from "./ProductionOrderWhereUniqueInput";
import { ProductionOrderUpdateInput } from "./ProductionOrderUpdateInput";
import { ProductionQueueFindManyArgs } from "../../productionQueue/base/ProductionQueueFindManyArgs";
import { ProductionQueue } from "../../productionQueue/base/ProductionQueue";
import { ProductionQueueWhereUniqueInput } from "../../productionQueue/base/ProductionQueueWhereUniqueInput";

export class ProductionOrderControllerBase {
  constructor(protected readonly service: ProductionOrderService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: ProductionOrder })
  async createProductionOrder(
    @common.Body() data: ProductionOrderCreateInput
  ): Promise<ProductionOrder> {
    return await this.service.createProductionOrder({
      data: {
        ...data,

        product: data.product
          ? {
              connect: data.product,
            }
          : undefined,
      },
      select: {
        createdAt: true,
        id: true,

        product: {
          select: {
            id: true,
          },
        },

        quantity: true,
        requiredMaterials: true,
        totalCost: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [ProductionOrder] })
  @ApiNestedQuery(ProductionOrderFindManyArgs)
  async productionOrders(
    @common.Req() request: Request
  ): Promise<ProductionOrder[]> {
    const args = plainToClass(ProductionOrderFindManyArgs, request.query);
    return this.service.productionOrders({
      ...args,
      select: {
        createdAt: true,
        id: true,

        product: {
          select: {
            id: true,
          },
        },

        quantity: true,
        requiredMaterials: true,
        totalCost: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: ProductionOrder })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async productionOrder(
    @common.Param() params: ProductionOrderWhereUniqueInput
  ): Promise<ProductionOrder | null> {
    const result = await this.service.productionOrder({
      where: params,
      select: {
        createdAt: true,
        id: true,

        product: {
          select: {
            id: true,
          },
        },

        quantity: true,
        requiredMaterials: true,
        totalCost: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: ProductionOrder })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateProductionOrder(
    @common.Param() params: ProductionOrderWhereUniqueInput,
    @common.Body() data: ProductionOrderUpdateInput
  ): Promise<ProductionOrder | null> {
    try {
      return await this.service.updateProductionOrder({
        where: params,
        data: {
          ...data,

          product: data.product
            ? {
                connect: data.product,
              }
            : undefined,
        },
        select: {
          createdAt: true,
          id: true,

          product: {
            select: {
              id: true,
            },
          },

          quantity: true,
          requiredMaterials: true,
          totalCost: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: ProductionOrder })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteProductionOrder(
    @common.Param() params: ProductionOrderWhereUniqueInput
  ): Promise<ProductionOrder | null> {
    try {
      return await this.service.deleteProductionOrder({
        where: params,
        select: {
          createdAt: true,
          id: true,

          product: {
            select: {
              id: true,
            },
          },

          quantity: true,
          requiredMaterials: true,
          totalCost: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/productionQueues")
  @ApiNestedQuery(ProductionQueueFindManyArgs)
  async findProductionQueues(
    @common.Req() request: Request,
    @common.Param() params: ProductionOrderWhereUniqueInput
  ): Promise<ProductionQueue[]> {
    const query = plainToClass(ProductionQueueFindManyArgs, request.query);
    const results = await this.service.findProductionQueues(params.id, {
      ...query,
      select: {
        createdAt: true,
        id: true,

        productionOrder: {
          select: {
            id: true,
          },
        },

        scheduledDate: true,
        status: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/productionQueues")
  async connectProductionQueues(
    @common.Param() params: ProductionOrderWhereUniqueInput,
    @common.Body() body: ProductionQueueWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      productionQueues: {
        connect: body,
      },
    };
    await this.service.updateProductionOrder({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/productionQueues")
  async updateProductionQueues(
    @common.Param() params: ProductionOrderWhereUniqueInput,
    @common.Body() body: ProductionQueueWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      productionQueues: {
        set: body,
      },
    };
    await this.service.updateProductionOrder({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/productionQueues")
  async disconnectProductionQueues(
    @common.Param() params: ProductionOrderWhereUniqueInput,
    @common.Body() body: ProductionQueueWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      productionQueues: {
        disconnect: body,
      },
    };
    await this.service.updateProductionOrder({
      where: params,
      data,
      select: { id: true },
    });
  }
}
